program xccor

use mpi
use xcc_m         ! xcc_m: imported module which contains all the functions, subroutines
                  ! and also other imported modules (e.g. my_definition_m, string_m, math_m, date_time_m).
use db_m, only: myrank, nprocs


implicit none


! ***********************************************************************
! Variable declaration section.
! ***********************************************************************
character(64) :: version = ' (v6.0)'

integer ndim1, ndim2, idim1

integer i, j, k, jmax, nlag
integer nargin, myroot, ier
integer ist, iev, jsta1, jsta2
integer npow, lag, nwt, nwf, nweight
integer nstrArray, bs_N, ispws, iunit
integer event_type, station_type, record_type
integer nst, nev, nev_tmp, nev_gathered, npts, count


logical tnorm, tfilter, onebit, notch, isbs, flag
logical onlycc, is_save_sac, isrecord, isverbose, istack


integer(8) ndim, iproc
integer(8) nstxnev, nstxnev_tmp, nstxnev_gathered
!integer(8) ntime1, ntime2, nrate


real(SGL) lon, lat, freqmin
real(SGL) f1, f2, f3, f4, fr1, fr2

real(DBL) dt, t0, tlen


character(len=1) sbs, srecord, sverbose, spws
character(len=1) stnorm, stfilter, sonebit, snotch
character(len=3) bs_type
character(len=8) netname, staname, channel
character(len=10) cc_flag, sac_flag, stack_flag

character(len=512) evpath, str_tmp
character(len=512) sacfolder, pzfolder, tarfolder


type(event) evt_tmp
type(station) sta_tmp
type(record) rec_tmp
type(sac_db) sdb, sdb_tmp

integer, allocatable, dimension(:) :: blocklen, types
integer(MPI_ADDRESS_KIND), allocatable, dimension(:) :: base, disp

integer, allocatable, dimension(:) :: recvcounts, displs

character(len=128), allocatable, dimension(:) :: strArray




! ***********************************************************************
! Initialize MPI.
! ***********************************************************************
call MPI_INIT(ier)
call MPI_COMM_RANK(MPI_COMM_WORLD, myrank, ier)
call MPI_COMM_SIZE(MPI_COMM_WORLD, nprocs, ier)
myroot = nprocs - 1


! ***********************************************************************
! Construct new event data type for later data sharing.
! ***********************************************************************
count = 4
allocate(base(count), disp(count), blocklen(count), types(count))
blocklen = (/ 512, 6, 1, 1 /)
types =(/ MPI_CHARACTER, MPI_INTEGER, MPI_DOUBLE_PRECISION, MPI_DOUBLE_PRECISION /)
call MPI_GET_ADDRESS(evt_tmp%name, base(1), ier)
call MPI_GET_ADDRESS(evt_tmp%yy, base(2), ier)
call MPI_GET_ADDRESS(evt_tmp%s, base(3), ier)
call MPI_GET_ADDRESS(evt_tmp%t0, base(4), ier)
disp(1) = 0
disp(2) = base(2) - base(1)
disp(3) = base(3) - base(1)
disp(4) = base(4) - base(1)
call MPI_TYPE_CREATE_STRUCT(count, blocklen, disp, types, event_type, ier)
call MPI_TYPE_COMMIT(event_type, ier)
deallocate(base, disp, blocklen, types)


! ***********************************************************************
! Construct new station data type for later data sharing.
! ***********************************************************************
count = 3
allocate(base(count), disp(count), blocklen(count), types(count))
blocklen = (/ 8, 16, 2 /)
types =(/ MPI_CHARACTER, MPI_CHARACTER, MPI_REAL /)
call MPI_GET_ADDRESS(sta_tmp%name, base(1), ier)
call MPI_GET_ADDRESS(sta_tmp%n_name, base(2), ier)
call MPI_GET_ADDRESS(sta_tmp%lat, base(3), ier)
disp(1) = 0
disp(2) = base(2) - base(1)
disp(3) = base(3) - base(1)
call MPI_TYPE_CREATE_STRUCT(count, blocklen, disp, types, station_type, ier)
call MPI_TYPE_COMMIT(station_type, ier)
deallocate(base, disp, blocklen, types)


! ***********************************************************************
! Construct new record data type for later data sharing.
! ***********************************************************************
count = 6
allocate(base(count), disp(count), blocklen(count), types(count))
blocklen = (/ 512, 8, 1, 1, 1, 1 /)
types =(/ MPI_CHARACTER, MPI_CHARACTER, MPI_DOUBLE_PRECISION, &
     MPI_DOUBLE_PRECISION, MPI_DOUBLE_PRECISION, MPI_INTEGER /)
call MPI_GET_ADDRESS(rec_tmp%name, base(1), ier)
call MPI_GET_ADDRESS(rec_tmp%channel, base(2), ier)
call MPI_GET_ADDRESS(rec_tmp%t0, base(3), ier)
call MPI_GET_ADDRESS(rec_tmp%frac, base(4), ier)
call MPI_GET_ADDRESS(rec_tmp%dt, base(5), ier)
call MPI_GET_ADDRESS(rec_tmp%nrec, base(6), ier)
disp(1) = 0
disp(2) = base(2) - base(1)
disp(3) = base(3) - base(1)
disp(4) = base(4) - base(1)
disp(5) = base(5) - base(1)
disp(6) = base(6) - base(1)
call MPI_TYPE_CREATE_STRUCT(count, blocklen, disp, types, record_type, ier)
call MPI_TYPE_COMMIT(record_type, ier)
deallocate(base, disp, blocklen, types)





!! ***********************************************************************
!! Master processor is responsible for the preprocessing work.
!! ***********************************************************************
!if (myrank == myroot) then

   ! Get the number of command line argumet(s).
   nargin = command_argument_count()

   ! Return if the number of input argument(s) is wrong.
   if (3 /= nargin) then
      write(*,*) "Usage: AND sacfolder pzfolder tarfolder"
      call flush(6)
      call MPI_FINALIZE(ier)
      stop
   end if


   ! =====================================================================================
   ! =============================== SECTION 1 BEGINS ====================================
   ! =====================================================================================
   ! This section parse the input parameters.
if (myrank == myroot) then
   write(*,"(A)")
   write(*,"(A)") 'This program computes cross-correlation and/or does AFTAN' // trim(version)
   write(*,"(A)") 'Its efficiency has been improved significantly by removing any unneccessary '
   write(*,"(A)") 'MPI_SEND & MPI_RECV and paralleling all parts by ysliu'
   write(*,"(A)") 'All processors are used to compute instead of the master processor just for '
   write(*,"(A)") 'message passing just as those original version done'
   write(*,"(A)")
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") '                         SECTION 1 BEGINS'
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") 'Reading input parameters ...'
   write(*,"(A)") '************************************'
end if

   ! Obtain the command line input argument.
   call get_command_argument(1, sacfolder)
   call get_command_argument(2, pzfolder)
   call get_command_argument(3, tarfolder)



   ! ***********************************************************************
   ! Read the parameters from the 'input.dat' file.
   ! ***********************************************************************
   iunit = myrank + 11
   open(unit=iunit, file='input.dat', status='old', action='read', iostat=ier)

      if (0 /= ier) then
         write(*,"(A)") 'Error: Cannot open input.dat ! '
         call flush(6)
         close(unit=iunit)
         call MPI_FINALIZE(ier)
         stop
      end if

      read(iunit,*)
      read(iunit,*)
      read(iunit,*)
      read(iunit,*) channel
      read(iunit,*) f1, f2, f3, f4
      read(iunit,*) t0, tlen
      read(iunit,*) npow
      read(iunit,*) stnorm, nwt, stfilter, fr1, fr2
      read(iunit,*) sonebit
      read(iunit,*) nwf
      read(iunit,*) snotch, freqmin
      read(iunit,*) lag
      read(iunit,*) spws, nweight
      read(iunit,*)
      read(iunit,*)
      read(iunit,*)
      read(iunit,*)
      read(iunit,*)
      read(iunit,*) sbs, bs_N
      read(iunit,*) bs_type
      do i = 1, 20, 1
         read(iunit,*)
      end do
      read(iunit,*) srecord
      read(iunit,*) sverbose
      read(iunit,*) cc_flag
      read(iunit,*) sac_flag
      read(iunit,*) stack_flag

   close(unit=iunit)
!write(*,*) f1, f2, f3, f4, myrank

   ! ***********************************************************************
   ! Convert the periods to frequencies.
   ! ***********************************************************************
   f1 = 1.0/f1
   f2 = 1.0/f2
   f3 = 1.0/f3
   f4 = 1.0/f4
   fr1 = 1.0/fr1
   fr2 = 1.0/fr2


   ! ***********************************************************************
   ! Initialize the logical variables.
   ! ***********************************************************************
   tnorm = .false.
   tfilter = .false.
   onebit = .false.
   notch = .false.
   isbs = .false.
   isrecord = .false.
   isverbose = .false.
   ispws = 0
   onlycc = .false.
   is_save_sac = .true.
   istack = .false.
   if ((stnorm == 'Y') .or. (stnorm == 'y')) tnorm = .true.
   if ((stfilter == 'Y') .or. (stfilter == 'y')) tfilter = .true.
   if ((sonebit == 'Y') .or. (sonebit == 'y')) onebit = .true.
   if ((snotch == 'Y') .or. (snotch == 'y')) notch = .true.
   if ((sbs == 'Y') .or. (sbs == 'y')) isbs = .true.
   if ((srecord == 'Y') .or. (srecord == 'y')) isrecord = .true.
   if ((sverbose == 'Y') .or. (sverbose == 'y')) isverbose = .true.
   if ((spws == 'Y') .or. (spws == 'y')) ispws = 1
   if ((cc_flag == 'Y') .or. (cc_flag == 'y')) onlycc = .true.
   if ((sac_flag == 'Y') .or. (sac_flag == 'y')) is_save_sac = .false.
   if ((stack_flag == 'Y') .or. (stack_flag == 'y')) istack = .true.
   write(*,"(A,/)") 'Reading input parameters is done ... '
   call flush(6)



   ! ***********************************************************************
   ! Clear the [DATA] folder inside the target folder.
   ! ***********************************************************************
   !!call system('rm -rf '//trim(adjustl(tarfolder)))
   if (is_save_sac) then
      call system('rm -rf '//'./tmp/DATA')
   end if
   ! ***********************************************************************
   ! Clear the [tmp] folder in current folder.
   ! ***********************************************************************
   call system('rm -rf '//'./tmp')
   ! ***********************************************************************
   ! Create the [tmp] folder in current folder.
   ! ***********************************************************************
   call system('mkdir -p '//'./tmp')




   ! =====================================================================================
   ! =============================== SECTION 2 BEGINS ====================================
   ! =====================================================================================
   ! This section process the sac files and fill in the elements in the sdb struct.
if (myrank == myroot) then
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") '                         SECTION 2 BEGINS'
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") 'Constructing sdb struct ...'
   write(*,"(A)") '************************************'
end if


   ! ***********************************************************************
   ! Count the number of stations.
   ! ***********************************************************************
   iunit = nprocs + myrank + 11
   open(unit=iunit, file='stations.lst', status='old', action='read', iostat=ier)
      if (0 /= ier) then
         write(*,"(A)") 'Error: Cannot open stations.lst !'
         call flush(6)
         call MPI_FINALIZE(ier)
      close(unit=11)
      stop
      end if
      nst = 0
      do
         read(iunit, *, iostat=ier)
         if (0 /= ier) exit
         nst = nst + 1
      end do
   close(unit=iunit)


   ! ***********************************************************************
   ! Count the number of events.
   ! ***********************************************************************
   iunit = 2*nprocs + myrank + 11
   open(unit=iunit, file='events.lst', status='old', action='read', iostat=ier)
      if (0 /= ier) then
         write(*,"(A)") 'Error: Cannot open events.lst !'
         call flush(6)
         call MPI_FINALIZE(ier)
         close(unit=iunit)
         stop
      end if
      nev = 0
      do
         read(iunit, *, iostat=ier)
         if (0 /= ier) exit
         nev = nev + 1
      end do
   close(unit=iunit)

!end if  ! if (myrank == myroot) then
nstxnev = nst*nev



!! ***********************************************************************
!! Broadcast input parametes from the master proces to all other process.
!! ***********************************************************************
!call MPI_BCAST(nev, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(nst, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(f1, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(f2, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(f3, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(f4, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(t0, 1, MPI_DOUBLE_PRECISION, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(tlen, 1, MPI_DOUBLE_PRECISION, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(npow, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(tnorm, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(tfilter, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(onebit, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(notch, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(fr1, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(fr2, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(nwf, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(freqmin, 1, MPI_REAL, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(isbs, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(bs_N, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(bs_type, 3, MPI_CHARACTER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(lag, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(ispws, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(nweight, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(sacfolder, 512, MPI_CHARACTER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(pzfolder, 512, MPI_CHARACTER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(tarfolder, 512, MPI_CHARACTER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(isrecord, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(isverbose, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(onlycc, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(is_save_sac, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(istack, 1, MPI_logical, myroot, MPI_COMM_WORLD, ier)
! ***********************************************************************
! Allocate memory for the station, event and record elements in sdb.
! ***********************************************************************
!allocate(sdb%st(nst), sdb%ev(nev), sdb%rec(nev,nst))
nev_tmp = ceiling(real(nev)/real(nprocs))
write(*,*) 'nev_tmp = ', nev_tmp
!allocate(sdb%st(nst), sdb_tmp%ev(nev), sdb_tmp%rec(nev,nst))
allocate(sdb%st(nst), stat=ier)
!allocate(sdb_tmp%ev(nev_tmp), sdb_tmp%rec(nev_tmp,nst))
allocate(sdb_tmp%ev(nev_tmp), sdb_tmp%rec(nst,nev_tmp))



! ***********************************************************************
! sdb elements are filled in the master processor.
! ***********************************************************************
!if (myrank == myroot) then

   ! ***********************************************************************
   ! Fill the station elements (lon, lat, sta, net.sta) into sdb.st.
   ! ***********************************************************************
   iunit = 3*nprocs + myrank + 13
   open(unit=iunit, file='stations.lst', status='old', action='read', iostat=ier)

      ist = 0

      do
         read(iunit, *, iostat=ier) netname, staname, lon, lat
         if (0 /= ier) exit
         ist = ist + 1
         sdb%st(ist)%name = trim(adjustl(staname))
         sdb%st(ist)%n_name = trim(adjustl(netname))//'.'//trim(adjustl(staname))
         sdb%st(ist)%lon = lon
         sdb%st(ist)%lat = lat

      end do

      ! Save the number of stations in sdb%nst.
      sdb%nst = nst

   close(unit=iunit)



   ! ***********************************************************************
   ! do the time correction and fill in the sdb.
   ! ***********************************************************************
   flag = .false.

   iunit = 4*nprocs + myrank + 11
   open(unit=iunit, file='events.lst', status='old', action='read', iostat=ier)

      iev = 0

      !do
      do j = myrank, nev-1, nprocs

         ! skip head myrank lines, because they are processed by other processors
         do k = 1, myrank, 1
            read(iunit,*, iostat=ier)
            if (0 /= ier) exit
         end do

         read(iunit, "(A)", iostat=ier) evpath

!write(*,*) nev, j, ier, myrank
         if (0 /= ier) exit
         iev = iev + 1
!write(*,*) j, iev, myrank
         ! Split the input event path name.
         call split_string(evpath, '/', strArray, nstrArray)
         str_tmp = strArray(nstrArray)
write(*,*) j, trim(adjustl(evpath))
         ! ***********************************************************************
         ! Fill in the event time information into sdb.ev.
         ! ***********************************************************************
         read(str_tmp(1:4),*) sdb_tmp%ev(iev)%yy
         read(str_tmp(5:6),*) sdb_tmp%ev(iev)%mm
         read(str_tmp(7:8),*) sdb_tmp%ev(iev)%dd
         read(str_tmp(10:11),*) sdb_tmp%ev(iev)%h
         read(str_tmp(12:13),*) sdb_tmp%ev(iev)%m
         read(str_tmp(14:15),*) sdb_tmp%ev(iev)%s
         sdb_tmp%ev(iev)%jday = date2jday(sdb_tmp%ev(iev)%yy, sdb_tmp%ev(iev)%mm, sdb_tmp%ev(iev)%dd)
         sdb_tmp%ev(iev)%t0 = htoepoch(sdb_tmp%ev(iev)%yy, sdb_tmp%ev(iev)%jday, &
                                       sdb_tmp%ev(iev)%h, sdb_tmp%ev(iev)%m, dble(sdb_tmp%ev(iev)%s))
!write(*,*) sdb_tmp%ev(iev)%t0, myrank

         ! ***********************************************************************
         ! Create result folder and tmp path to sdb%ev%name.
         ! ***********************************************************************
         call system('mkdir -p '//trim(adjustl(tarfolder)))
         if (is_save_sac) then
            str_tmp = './tmp/DATA/'//trim(adjustl(strArray(nstrArray-2)))//'/'// &
                 trim(adjustl(strArray(nstrArray-1)))//'/'//trim(adjustl(str_tmp))
            sdb_tmp%ev(iev)%name = trim(adjustl(str_tmp))

            ! Create the target event folder.
            call system('mkdir -p '//trim(adjustl(str_tmp)))
         else
            str_tmp = trim(adjustl(tarfolder))//'/DATA/'//trim(adjustl(strArray(nstrArray-2)))// &
                            '/'//trim(adjustl(strArray(nstrArray-1)))//'/'//trim(adjustl(str_tmp))
            sdb_tmp%ev(iev)%name = trim(adjustl(str_tmp))
         end if

!if (myrank == 0) then
!   write(*,*) j, trim(adjustl(sdb_tmp%ev(iev)%name))
!end if

         ! Loop the station to processor the sac files and fill in the sdb elements.
         do ist = 1, nst, 1

            ! ***********************************************************************
            ! Initiate the sdb.rec.nrec and sdb.rec.frac elements.
            ! ***********************************************************************
            sdb_tmp%rec(ist,iev)%nrec = 0
            sdb_tmp%rec(ist,iev)%frac = 0.0

            ! ***********************************************************************
            ! processor the sac file for one record and fill in the sdb.rec info.
            ! ***********************************************************************
            call mk_one_rec(evpath, sdb, sdb_tmp, iev, ist, channel, is_save_sac, isverbose)
!if (sdb_tmp%rec(ist,iev)%nrec /= 0) then
!write(*,*) sdb_tmp%rec(ist,iev)%t0 - sdb_tmp%ev(iev)%t0, myrank
!end if


            dt = sdb_tmp%rec(ist,iev)%dt
            npts = sdb_tmp%rec(ist,iev)%nrec
            if ((0 /= npts ) .and. ((t0 + tlen) > (npts-1)*dt)) then
               write(*,"(A)") "Error: t0 + tlen > (npts-1)*dt !"
               write(*,"(A, F12.6)") "t0 + tlen   = ", t0 + tlen
               write(*,"(A, F12.6)") "(npts-1)*dt = ", (npts-1)*dt
               write(*,"(A)") "Error: parameters t0 and tlen must be set wrongly, please reset !"
               call flush(6)
               flag = .true.
               call MPI_ABORT(MPI_COMM_WORLD, -1, ier)
               stop
            end if

            if ((0 /= npts ) .and. (tlen < 0.65*(npts-1)*dt)) then
               write(*,"(A)") "Error: tlen < 0.65*(npts-1)*dt !"
               write(*,"(A, F12.6)") "tlen             = ", tlen
               write(*,"(A, F12.6)") "0.65*(npts-1)*dt = ", (npts-1)*dt
               write(*,"(A)") "Error: parameters t0 and tlen must be set wrongly, please reset !"
               call flush(6)
               flag = .true.
               call MPI_ABORT(MPI_COMM_WORLD, -1, ier)
               stop
            end if

         end do

         ! skip tail nprocs-(myrank+1) lines, because they are processed by other processors
         do k = myrank+2, nprocs, 1
            read(iunit,*, iostat=ier)
            if (0 /= ier) exit
         end do
         !! skip nprocs-1 lines, because they are processed by other processors
         !do k = 1, nprocs-1, 1
         !   read(iunit,*, iostat=ier)
         !   if (0 /= ier) exit
         !end do

      end do ! end of iev = 1, nev, 1

      ! Save the number of events in sdb%nev.
      !sdb%nev = nev

   close(unit=iunit)


   if (flag) then
      write(*,"(A)") "Error: parameters t0 and tlen must be set wrongly, please reset !"
      call flush(6)
      call MPI_ABORT(MPI_COMM_WORLD, -1, ier)
      call MPI_FINALIZE(ier)
      stop
   end if


!do j = 1, iev
!   do k = 1, nst
!      if ('./tmp/DATA/2017/03/20170317_090000/NCISP9.1020.BHZ.SAC' == trim(adjustl(sdb_tmp%rec(k,j)%name))) then
!         write(*,*) j, k, myrank, trim(adjustl(sdb_tmp%rec(k,j)%name))
!      end if
!   end do
!end do


!call system_clock(ntime1, nrate)
   ! compute the displ in GatherV
   allocate(recvcounts(nprocs), displs(nprocs), stat=ier)
!   call MPI_ALLGATHER(1, 1, MPI_INTEGER, recvcounts, 1, &
!                        MPI_INTEGER, MPI_COMM_WORLD, ier)
!write(*,*) recvcounts, myrank
   !call MPI_GATHER(iev, 1, MPI_INTEGER, recvcounts, 1, &
   !            MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
   !call MPI_BCAST(recvcounts, nprocs, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
   call MPI_ALLGATHER(iev, 1, MPI_INTEGER, recvcounts, 1, &
                          MPI_INTEGER, MPI_COMM_WORLD, ier)
   nev_gathered = sum(recvcounts)
!write(*,*) iev
!write(*,*) recvcounts
!write(*,*) nev, nev_gathered
   if ((nev /= nev_gathered) .and. (myrank == myroot)) then
      !write(*,*) nev, nev_gathered, myrank
      write(*,*) 'Error: nev is not equal to nev_gathered !'
   end if



   displs(1) = 0
   do iproc = 2, nprocs, 1
      displs(iproc) = displs(iproc-1) + recvcounts(iproc-1)
   end do
   write(*,*) displs(nprocs)+recvcounts(nprocs), nev_gathered
   !allocate(sdb%ev(nev), sdb%rec(nev,nst), stat=ier)
   allocate(sdb%ev(nev), sdb%rec(nst,nev), stat=ier)
   !call MPI_GATHERV(sdb_tmp%ev, iev, event_type, sdb%ev, &
   !     recvcounts, displs, event_type, myroot, MPI_COMM_WORLD, ier)
   !call MPI_BCAST(sdb%ev, nev, event_type, myroot, MPI_COMM_WORLD, ier)
   call MPI_ALLGATHERV(sdb_tmp%ev, iev, event_type, sdb%ev, &
         recvcounts, displs, event_type, MPI_COMM_WORLD, ier)
   sdb%nev = nev
!if (0 == myrank) then
!   write(*,*) recvcounts(myrank+1)
!   do k = 1, iev
!      write(*,*) sdb_tmp%ev(k)%t0, sdb%ev(displs(myrank+1)+k)%t0
!   end do
!end if


   recvcounts = recvcounts*nst
   displs(1) = 0
   do iproc = 2, nprocs, 1
      displs(iproc) = displs(iproc-1) + recvcounts(iproc-1)
   end do
   nstxnev_tmp = nst*iev
   nstxnev_gathered = sum(recvcounts)
   write(*,*) displs(nprocs)+recvcounts(nprocs), nstxnev_gathered, nstxnev
   !write(*,*) nstxnev_scattered, nstxnev
   if ((nstxnev /= nstxnev_gathered) .and. (myrank == myroot)) then
      !write(*,*) nev, nev_gathered, myrank
      write(*,*) 'Error: nstxnev is not equal to nstxnev_gathered !'
   end if
   !call MPI_GATHERV(sdb_tmp%rec, nstxnev_tmp, record_type, sdb%rec, &
   !     recvcounts, displs, record_type, myroot, MPI_COMM_WORLD, ier)
   !call MPI_BCAST(sdb%rec, nstxnev, record_type, myroot, MPI_COMM_WORLD, ier)
   call MPI_ALLGATHERV(sdb_tmp%rec, nstxnev_tmp, record_type, sdb%rec, &
                   recvcounts, displs, record_type, MPI_COMM_WORLD, ier)
!if (0 == myrank) then
!   write(*,*) recvcounts(myrank+1)
!   do j = 1, iev
!      do k = 1, nst
!      if (sdb_tmp%rec(k,j)%nrec /= 0) then
!      write(*,*) sdb_tmp%rec(k,j)%t0, sdb%rec(k,int(displs(myrank+1)/nst)+j)%t0, sdb_tmp%rec(k,j)%t0-sdb%rec(k,int(displs(myrank+1)/nst)+j)%t0
!      !write(*,*) sdb_tmp%rec(k,j)%t0, sdb%rec(int(displs(myrank+1)/nst),k)%t0
!      end if
!      end do
!   end do
!   !do j = 1, nev
!   !   do k = 1, nst
!   !      if (sdb%rec(k,j)%nrec /= 0) then
!   !      write(*,*) sdb%rec(k,j)%t0
!   !      end if
!   !   end do
!   !end do
!end if



   deallocate(sdb_tmp%ev, sdb_tmp%rec, recvcounts, displs)

!call system_clock(ntime2, nrate)
!write(*,*) 'time elapsed :', real(ntime2-ntime1)/real(nrate), myrank
   ! ***********************************************************************
   ! Write the info database into a ascii file if isrecord is true.
   ! ***********************************************************************
   if (isrecord .and. (myrank == myroot)) then
      call sacdb_to_asc(sdb, 'DataRecord.lst')
      write(*,"(A)") 'SAC data records are written into DataRecord.lst.'
      call flush(6)
   end if

if (myrank == myroot) then
   write(*,"(A,/)") 'Constructing sdb struct is done ... '
   call flush(6)
end if

!end if

   ! Check consistence of dt
dt = 0.05
   !dt = -1.0
   !flag = .false.
   !do iev = 1, nev, 1
   !   if (flag) exit
   !   do ist = 1, nst, 1
   !      if ((sdb%rec(ist,iev)%nrec) > 0) then
   !         dt = sdb%rec(ist,iev)%dt
   !         flag = .true.
   !         exit
   !      endif
   !   end do
   !end do


   if (dt < 0.0) then
      write(*,"(A)") 'Error: input data is wrongly set, please check !'
      call flush(6)
      call MPI_ABORT(MPI_COMM_WORLD, -1, ier)
      call MPI_FINALIZE(ier)
      stop
   end if


   ! Determine corresponding half-window length for time domain normalization
   ! Maximum allowed half-window length is 128 in sac for smooth command
   if (nwt > 0.0) then
      nwt = min(int(nwt/dt), 128)
   end if



!call MPI_BARRIER(MPI_COMM_WORLD, ier)


!if (0 == myrank)then
!   write(*,*) nev, nst
!   do iev = 1, nev
!      write(*,*) sdb%ev(iev)%t0
!      do ist = 1, nst
!         if (sdb%rec(ist,iev)%nrec /= 0) then
!         write(*,*) sdb%rec(ist,iev)%t0, sdb%rec(ist,iev)%t0 - sdb%ev(iev)%t0, trim(adjustl(sdb%rec(ist,iev)%name))
!         end if
!      end do
!      write(*,*)
!   end do
!end if


!if (0 == myrank) then
!   write(*,*) iev, myrank
!   write(*,*) trim(adjustl(sdb%rec(2,113)%name)), myrank
!   !do j = 1, nev
!   !   do k = 1, nst
!   !      write(*,*) j, k, trim(adjustl(sdb%rec(k,j)%name))
!   !   end do
!   !end do
!end if
!if (1 == myrank) then
!   write(*,*) iev, myrank
!   write(*,*) trim(adjustl(sdb%rec(2,113)%name)), myrank
!end if
!if (2 == myrank) then
!   write(*,*) iev, myrank
!   write(*,*) trim(adjustl(sdb%rec(2,113)%name)), myrank
!end if


!nstxnev = nst*nev
! ***********************************************************************
! Broadcast all the elements in sdb to all other process.
! ***********************************************************************
!call MPI_BCAST(sdb%ev, nev, event_type, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(sdb%st, nst, station_type, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(sdb%rec, nstxnev, record_type, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(sdb%nev, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(sdb%nst, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)

! ***********************************************************************
! Broadcast dt and nwt to all other process.
! ***********************************************************************
!call MPI_BCAST(dt, 1, MPI_DOUBLE_PRECISION, myroot, MPI_COMM_WORLD, ier)
!call MPI_BCAST(nwt, 1, MPI_INTEGER, myroot, MPI_COMM_WORLD, ier)




! ***********************************************************************
! Note: In the following version, all processors will be used for computation instead of
! the master processor used for message passing just as those done in the original version.
! ***********************************************************************

! ***********************************************************************
! Preprocess data, including remove instrument response, fractional time correction,
! temporal normalization, spectral whitening, cuting data, computing Fourier spectrum, etc.
! ***********************************************************************
if (myrank == myroot) then

   ! =====================================================================================
   ! =============================== SECTION 3 BEGINS ====================================
   ! =====================================================================================
   ! This section removes the instrument response, cut the data, do the band-pass filtering,
   ! correct the time fraction, do the time domain normalization and spectra whitening.
   ! All the tasks are done using the so called self-scheduling mode.

   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") '                         SECTION 3 BEGINS'
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") 'Data preprocessing ...'
   write(*,"(A)") '************************************'
   call flush(6)

end if

call MPI_BARRIER(MPI_COMM_WORLD, ier)



ndim1 = nev
ndim2 = nst
ndim = nstxnev - 1

do iproc = myrank, ndim, nprocs

   idim1 = int(int8(iproc/ndim2))
   iev = idim1 + 1
   ist = iproc - int8(idim1*ndim2) + 1

   if ((iev < 1) .or. (ist < 1) .or. (iev > ndim1) .or. (ist > ndim2)) cycle


   call remove_RESP(sdb, iev, ist, f1, f2, f3, f4, pzfolder, isverbose)
!write(*,*) 'iev, ist, myrank = ', iev, ist, myrank
   call preprocess(sdb, iev, ist, tnorm, onebit, notch, tfilter, f1, f2, &
           f3, f4, fr1, fr2, npow, nwt, nwf, freqmin, t0, tlen, isverbose)

end do



call MPI_BARRIER(MPI_COMM_WORLD, ier)




! ***********************************************************************
! compute cross-correlation and AFTAN etc.
! ***********************************************************************

nlag = nint(real(lag/dt))
if (myrank == myroot) then

   ! =====================================================================================
   ! =============================== SECTION 4 BEGINS ====================================
   ! =====================================================================================
   ! This section computes the cross-correlation and measures the dispersion curves.

   write(*,"(A)") '**********************************************************************'
   write(*,"(A)") '                         SECTION 4 BEGINS'
   write(*,"(A)") '***********************************************************************'
   write(*,"(A)") 'Doing cross-correlation and/or AFTAN ...'
   write(*,"(A)") '****************************************'
   call flush(6)

   ! Delete the CCRecord.lst file if isrecord is true.
   if (isrecord) then
      call system('rm -rf CCRecord.lst')
   end if

end if

call MPI_BARRIER(MPI_COMM_WORLD, ier)




ndim1 = nst
ndim2 = nst
ndim = nst*nst - 1

do iproc = myrank, ndim, nprocs

   idim1 = int(int8(iproc/ndim2))
   jsta1 = idim1 + 1
   jsta2 = iproc - int8(idim1*ndim2) + 1

   if ((jsta1 < 1) .or. (jsta2 < 1) .or. (jsta1 > ndim1) .or. (jsta2 > ndim2)) cycle


   ! NOTE: You can comment here for some specific targets,
   !       such as Z-N or Z-E cross-correlation
   if (jsta2 <= jsta1) cycle


   call cc_and_aftan(sdb, nlag, tarfolder, isbs, bs_N, bs_type, jsta1, jsta2, &
                   isverbose, isrecord, istack, onlycc, f1, f4, ispws, nweight)

end do


call MPI_BARRIER(MPI_COMM_WORLD, ier)



! ***********************************************************************
! post-process to remove temporary folders or files
! ***********************************************************************

if (myrank == myroot) then

   ! ***********************************************************************
   ! Remove the DATA folder.
   ! ***********************************************************************
   if (is_save_sac) then
      call system('rm -rf '//'./tmp/DATA')
   end if

   ! ***********************************************************************
   ! Remove possible empty folder(s) and file(s).
   ! ***********************************************************************
   call system("find "//trim(adjustl(tarfolder))//" -depth -type 'd' -empty -exec rmdir {} \;")
   call system("find "//trim(adjustl(tarfolder))//' -name "*" -type f -size 0c | xargs -n 1 rm -f')

   ! ***********************************************************************
   ! Deallocate memory for the elements in sdb and strArray.
   ! ***********************************************************************
   deallocate(sdb%st, sdb%ev, sdb%rec, strArray)

   if (onlycc) then
      write(*,"(A)")
      write(*,"(A)") 'Cross-correlation is done ... '
      write(*,"(A)")
      call flush(6)
   else
      write(*,"(A)")
      write(*,"(A)") 'Cross-correlation and AFTAN is done ... '
      write(*,"(A)")
      call flush(6)
   end if

   ! ***********************************************************************
   ! Remove the tmp folder.
   ! ***********************************************************************
   call system("find ./tmp -depth -type 'd' -empty -exec rmdir {} \;")

end if




call MPI_BARRIER(MPI_COMM_WORLD, ier)



call MPI_FINALIZE(ier)



end program xccor
